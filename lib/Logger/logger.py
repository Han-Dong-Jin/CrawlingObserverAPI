import re
import os
from datetime import datetime
from lib.Config.config import Config

COLOR_MAP = {
    "START": "\033[92m",  # Ï¥àÎ°ù
    "FILE": "\033[96m",  # Î∞ùÏùÄ Ï≤≠Î°ù
    "DB": "\033[94m",  # ÌååÎûë
    "WAIT": "\033[90m",  # ÌöåÏÉâ
    "WARN": "\033[93m",  # ÎÖ∏Îûë
    "ERROR": "\033[91m",  # Îπ®Í∞ï
    "INFO": "\033[97m",  # Ìù∞ÏÉâ
    "DEBUG": "\033[95m",  # Î≥¥Îùº
    "RESET": "\033[0m",  # ÏÉâÏÉÅ Ï¥àÍ∏∞Ìôî
}


class Logger:
    use_color = Config.get("color_log", True)
    base_log_dir = os.path.join(os.path.dirname(__file__), "logs")
    os.makedirs(base_log_dir, exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    common_log_file = os.path.join(base_log_dir, f"log_common_{timestamp}.log")

    error_count = 0
    error_log_dir = os.path.join(base_log_dir, "errors")
    os.makedirs(error_log_dir, exist_ok=True)
    error_log_file = os.path.join(error_log_dir, f"log_error_{timestamp}.log")

    def __init__(self, name: str):
        self.name = name
        self.indiv_log_dir = os.path.join(Logger.base_log_dir, name)
        os.makedirs(self.indiv_log_dir, exist_ok=True)

        self.log_file = os.path.join(self.indiv_log_dir, f"log_{Logger.timestamp}.log")

    def log(self, level: str, message: str):
        color = COLOR_MAP.get(level.upper(), "") if Logger.use_color else ""
        reset = COLOR_MAP["RESET"] if Logger.use_color else ""
        timestamp = datetime.now().strftime("%m-%d %H:%M:%S")
        formatted = f"[{timestamp}] [{level:<6}] {self.name:<24} - {message}"

        # ERROR ‚Üí ÌååÏùº + Ï°∞Í±¥Î∂Ä ÏΩòÏÜî Ï∂úÎ†•
        if level.upper() == "ERROR":
            Logger.error_count += 1
            with open(Logger.error_log_file, "a", encoding="utf-8") as ef:
                ef.write(formatted + "\n")
            if Config.get("print_error_log", True):  # üî∏ ÏΩòÏÜî Ï∂úÎ†•ÏùÄ ÏòµÏÖòÏóê Îî∞Îùº
                print(f"{color}{formatted}{reset}")

        # DEBUG ‚Üí ÌÖåÏä§Ìä∏ Î™®ÎìúÏùº ÎïåÎßå ÏΩòÏÜî Ï∂úÎ†•
        elif level.upper() == "DEBUG":
            if Config.get("is_test", False):
                print(f"{color}{formatted}{reset}")

        # ÎÇòÎ®∏ÏßÄ ‚Üí Ìï≠ÏÉÅ ÏΩòÏÜî Ï∂úÎ†•
        else:
            print(f"{color}{formatted}{reset}")

        # Î™®Îì† Î°úÍ∑∏Îäî ÌååÏùºÏóê Í∏∞Î°ù
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(formatted + "\n")
        with open(Logger.common_log_file, "a", encoding="utf-8") as f:
            f.write(formatted + "\n")

    def log_summary(self):
        timestamp = datetime.now().strftime("%m-%d %H:%M:%S")
        level = "SUMMARY"
        message = (
            f"Î°úÍ∑∏ Ï†ÄÏû• ÏôÑÎ£å-`{Logger.base_log_dir}` ERROR Î∞úÏÉù: {Logger.error_count}Í∞ú"
        )

        if Logger.use_color:
            color = COLOR_MAP["ERROR"] if Logger.error_count > 0 else COLOR_MAP["WAIT"]
            reset = COLOR_MAP["RESET"]
        else:
            color = ""
            reset = ""

        formatted = f"[{timestamp}] [{level:<6}] {self.name:<24} - {message}"
        print(f"{color}{formatted}{reset}")
        Logger.error_count = 0
